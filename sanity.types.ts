/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Amenity = {
  _id: string;
  _type: "amenity";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
};

export type Property = {
  _id: string;
  _type: "property";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  location?: string;
  price?: number;
  images?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
  propertyType?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "category";
  };
  bedrooms?: number;
  bathrooms?: number;
  genderPreference?: "Any Gender" | "Female" | "Male";
  amenities?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "amenity";
  }>;
  contractLength?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "contractLength";
  };
  description?: string;
  clerkUserId?: string;
  creatorName?: string;
  creatorImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  joinedDate?: string;
  status?: "Available" | "Occupied" | "Under Maintenance";
};

export type ContractLength = {
  _id: string;
  _type: "contractLength";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
};

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityFileAsset | Geopoint | Amenity | Property | ContractLength | Category | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata | Slug;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./sanity/lib/queries.ts
// Variable: GET_ALL_LISTINGS
// Query: *[_type == "property"] | order(name asc){      ...,      "images": images[]{        "url": asset->url      },      "amenities": amenities[]-> {        title,      },      propertyType->{        title      },      contractLength->{        title      },  }
export type GET_ALL_LISTINGSResult = Array<{
  _id: string;
  _type: "property";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  location?: string;
  price?: number;
  images: Array<{
    url: string | null;
  }> | null;
  propertyType: {
    title: string | null;
  } | null;
  bedrooms?: number;
  bathrooms?: number;
  genderPreference?: "Any Gender" | "Female" | "Male";
  amenities: Array<{
    title: string | null;
  }> | null;
  contractLength: {
    title: string | null;
  } | null;
  description?: string;
  clerkUserId?: string;
  creatorName?: string;
  creatorImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  joinedDate?: string;
  status?: "Available" | "Occupied" | "Under Maintenance";
}>;
// Variable: GET_LISTING_BY_ID
// Query: *[_type == "property" && _id == $id][0]{      ...,      "images": images[]{        "url": asset->url      },      "amenities": amenities[]-> {        title,      },      propertyType->{        title      },      contractLength->{        title      },      "creatorImage": creatorImage.asset->url,  }
export type GET_LISTING_BY_IDResult = {
  _id: string;
  _type: "property";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  location?: string;
  price?: number;
  images: Array<{
    url: string | null;
  }> | null;
  propertyType: {
    title: string | null;
  } | null;
  bedrooms?: number;
  bathrooms?: number;
  genderPreference?: "Any Gender" | "Female" | "Male";
  amenities: Array<{
    title: string | null;
  }> | null;
  contractLength: {
    title: string | null;
  } | null;
  description?: string;
  clerkUserId?: string;
  creatorName?: string;
  creatorImage: string | null;
  joinedDate?: string;
  status?: "Available" | "Occupied" | "Under Maintenance";
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == \"property\"] | order(name asc){\n      ...,\n      \"images\": images[]{\n        \"url\": asset->url\n      },\n      \"amenities\": amenities[]-> {\n        title,\n      },\n      propertyType->{\n        title\n      },\n      contractLength->{\n        title\n      },\n  }": GET_ALL_LISTINGSResult;
    "*[_type == \"property\" && _id == $id][0]{\n      ...,\n      \"images\": images[]{\n        \"url\": asset->url\n      },\n      \"amenities\": amenities[]-> {\n        title,\n      },\n      propertyType->{\n        title\n      },\n      contractLength->{\n        title\n      },\n      \"creatorImage\": creatorImage.asset->url,\n  }": GET_LISTING_BY_IDResult;
  }
}
